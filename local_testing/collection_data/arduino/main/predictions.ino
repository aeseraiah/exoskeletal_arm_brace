// This file covers the prediction of movement

float model_predictions(double bicep_rms, double tricep_rms) {

  // while(1) {

  //AIfES requires random weights for training
  //Here the random seed is generated by the noise of an analog pin
  srand(analogRead(A5));
  uint32_t i;

  // float input_data[number_data_points*2];
  // float input_data[0] = bicep_rms;
  // float input_data[1] = tricep_rms;
  float input_data[] = {static_cast<float>(bicep_rms), static_cast<float>(tricep_rms)};

  uint16_t input_shape[] = {1, 2}; // single RMS data point (bi and tri) --> single row, two columns                                 
  aitensor_t input_tensor = AITENSOR_2D_F32(input_shape, input_data);   // Creation of the input AIfES tensor

  // Tensor for the output with 3 classes
  // Output values of the ANN are saved here
  float output_data[1];                                                    // Array for storage of the output data, for each object/class one output is created
  uint16_t output_shape[] = {1, 1};                                       // Definition of the shape of the tensor, here: {1 (i.e. 1 sample), 3 (i.e. the sample contains predictions for 3 classes/objects)}
  aitensor_t output_tensor = AITENSOR_2D_F32(output_shape, output_data);  // Creation of the output AIfES tensor

  aialgo_inference_model(&model, &input_tensor, &output_tensor);

  Serial.println(F(""));
  Serial.println(F("PREDICTIONS:"));
  Serial.println(F("Bicep RMS:\tTricep RMS 2:\tcalculated output:\tpredicted label:"));
  
  uint32_t input_counter = 0;
  float predicted_label;

  // ----------------------------------------- Output of results --------------------------
  
  Serial.print(bicep_rms);
  Serial.print(F("\t\t"));
  Serial.print(tricep_rms);
  Serial.print(F("\t\t"));
  Serial.print(output_data[0]);
  if (output_data[0] > 0.5) {
    // ACTUATE SERVO:
    // String movement = flexion;
    // actuateServo(movement)
    predicted_label = 1;
  } 
  else {
    // ACTUATE SERVO:
    // String movement = extension;
    // actuateServo(movement)
    predicted_label = 0;
  }
  Serial.print(F("\t\t\t"));
  Serial.println(predicted_label);

  return;

}
